// Demonstrate primitve drawing in SFML
#include<iostream>
using namespace std;


#include "SFML/Graphics.hpp"

int main() {

    //game set up (you'll need these two lines in every game)
    sf::RenderWindow renderWindow(sf::VideoMode(500, 500), "Pong Paddle"); //set up screen
    sf::Event event; //set up event queue

    //paddle1 set up
    sf::RectangleShape paddle1(sf::Vector2f(100.0f, 100.0f));
    paddle1.setFillColor(sf::Color::Blue); //other colors: https://www.sfml-dev.org/documentation/2.5.1/classsf_1_1Color.php
    paddle1.setPosition(100.0f, 100.0f); //set position: this is where the top left corner will be

    sf::RectangleShape paddle2(sf:; Vector2f(100.0f, 100.0f));
    paddle2.setFillColor(sf::Color::Blue);
    paddle2.setPosition(100.0f, 100.0f);

    //################### HOLD ONTO YOUR BUTTS, ITS THE GAME LOOP###############################################################
    while (renderWindow.isOpen()) {//keep window open until user shuts it down
        while (renderWindow.pollEvent(event)) { //look for events

            //this checks if the user has clicked the little "x" button in the top right corner
            if (event.type == sf::Event::EventType::Closed)
                renderWindow.close();

            //KEYBOARD INPUT (just one key to start
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::W)) { //checks if "W" is pressed
                paddle1.move(0, -5); //move the rectangle 5 pixels UP on the y axis
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::S)) {
                paddle1.move(0, 5);
            }

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) {
                paddle2.move(0, -5);

            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) {
                paddle2.move(0, 5);

            }
        }
    }
    //physics section:

    //paddle collision
    if (ballX - 30 < paddle1.getPosition().x && ballY > paddle1.getPosition().x && ballY < paddle1.getPosition().y + 100) {
        cout << "Paddle 1 collision!" << endl;
        //eventually add a sound effect here
        xVel *= -1;
    }
    if (ballX - 30 < paddle2.getPosition().x && ballY > paddle2.getPosition().x && ballY < paddle2.getPosition().y + 100) {
        cout << "Paddle 2 collision!" << endl;
        //eventually add another sound effect here
        xVel *= -1;
    }

    //reflect off left and right walls
    if (ballX < 0 || ballX > 500) {
        xVel *= -1;
    }
    // reflect off top and bottom walls
    if (ballY < 0 || ballY > 500) {
        yVel *= -1;
    }
    //add speed to position
    ballX += xVel;
    ballY += yVel;
// add ball 
        ball.setPosition(ballX, ballY);
        //render section-----------------------------------------
        renderWindow.clear(); //wipes screen, without this things smear
        renderWindow.draw(paddle1); //you gotta drew each object
        renderWindow.draw(paddle2);//paddle 2 drawn
        //ball set up:
        float ballx = 250;
        float ballY = 250;
        float xVel = .01;
        float yVel = .01;
        sf::CircleShape ball(250);//sets radius
        ball.setFillColor(sf::Color(200, 80, 50));
        ball.setPosition(80, 80);
        renderWindow.display(); //flips memory drawings onto screen

    }//######################## end game loop ###################################################################################

    cout << "goodbye!" << endl;
} //end game
